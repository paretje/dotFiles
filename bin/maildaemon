#!/usr/bin/python3
# coding: utf-8
import os
import time
import logging
import subprocess
import threading
import signal
import toml
import appdirs
import shelve
import notmuch
import arrow
import notify2
from imapclient import IMAPClient
from email.utils import parseaddr


NOTIFICATION_EVENT = threading.Event()


class IMAPAccount():
    def __init__(self, account_name, username, password_cmd, host, port=None,
                 folder='INBOX', sync_interval=5*60, imap_idle=True):
        self.name = account_name
        self.username = username
        self.password_cmd = password_cmd
        self.host = host
        self.port = port
        self.folder = folder
        self.sync_interval = sync_interval
        self.imap_idle = imap_idle

        self.timer = None

    @property
    def password(self):
        return subprocess.check_output(self.password_cmd, shell=True) \
                         .decode('utf8').strip()

    def _sync(self):
        logging.info('start syncing %s', self.name)
        subprocess.check_call(['mbsync', self.name])
        subprocess.check_call(['notmuch', "new"])
        logging.debug('finished syncing %s', self.name)
        NOTIFICATION_EVENT.set()

    def sync(self):
        if self.timer and not self.timer.ident:
            logging.debug('cancel timer')
            self.timer.cancel()

        try:
            self._sync()
        except subprocess.CalledProcessError:
            logging.error("couldn't sync %s", self.name)

        self.timer = threading.Timer(self.sync_interval, self.sync)
        self.timer.start()

    def idle_client(self):
        while True:
            try:
                client = IMAPClient(self.host, self.port, use_uid=True,
                                    ssl=True)
                client.login(self.username, self.password)
                try:
                    client.select_folder(self.folder)
                except Exception:
                    logging.error("unable to select folder %s", self.folder)
                    return

                logging.info("connected to %s", self.name)
                while True:
                    client.idle()
                    for m in client.idle_check(timeout=30):
                        if m[1] == b'RECENT':
                            self.sync()
                    time.sleep(1)
                    client.idle_done()
                client.logout()
            except Exception:
                logging.warn("lost connection")

    def start(self):
        if self.imap_idle:
            idle_thread = threading.Thread(target=self.idle_client)
            idle_thread.start()

        timer_thread = threading.Thread(target=self.sync)
        timer_thread.start()


def pretty_sender(fromline):
    name, addr = parseaddr(fromline)
    return name or addr


# TODO: isn't a separate thread unnecessary overhead?
class NewMailNotification(threading.Thread):
    def __init__(self):
        super().__init__()
        cache_dir = appdirs.user_cache_dir(appname='maildaemon')
        os.makedirs(cache_dir, exist_ok=True)

        self.path = os.environ.get('MAILDIR', None)
        self.last_seen_file = os.path.join(cache_dir, 'last_seen')
        self.recency_interval = 60 * 60

    def get_new_messages(self):
        with shelve.open(self.last_seen_file) as last_seen:
            now = time.time()

            for k, v in last_seen.items():
                if now - v > self.recency_interval:
                    del last_seen[k]

            with notmuch.Database(path=self.path) as db:
                query = notmuch.Query(db, 'tag:inbox and tag:unread')
                query.set_sort(notmuch.Query.SORT.OLDEST_FIRST)
                for message in query.search_messages():
                    m_id = message.get_message_id()
                    if m_id not in last_seen:
                        last_seen[m_id] = now
                        yield message

    def show_notification(self):
        logging.debug("prepare notification")
        summary = '\n'.join('{tags}{subject} ({sender}, {date})'.format(
                    subject=message.get_header('subject'),
                    sender=pretty_sender(message.get_header('from')),
                    date=arrow.get(message.get_date()).humanize(),
                    tags='')
                for message in self.get_new_messages())

        if summary:
            logging.debug("show notification and refresh alot")
            notify2.Notification("You've got mail", summary).show()
            subprocess.call(['pkill', '-u', os.environ['USER'], '-USR1',
                             'alot'])

    def run(self):
        notify2.init('maildaemon')
        while True:
            NOTIFICATION_EVENT.wait()
            logging.debug("notification event")
            try:
                self.show_notification()
            except Exception:
                logging.error("couldn't show notification")
            NOTIFICATION_EVENT.clear()


if __name__ == "__main__":
    config = toml.load(os.path.expanduser('~/.maildaemon.toml'))
    enabled_accounts = os.environ.get('MAIL_ACCOUNTS', '').split(' ')
    import sys
    logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

    notification_thread = NewMailNotification()
    notification_thread.start()

    accounts = []
    for account_name, account_config in config['accounts'].items():
        if account_name not in enabled_accounts:
            continue

        account = IMAPAccount(account_name, **account_config)
        account.start()
        accounts.append(account)

    def force_sync(sig, frame):
        for account in accounts:
            account.sync()
    signal.signal(signal.SIGUSR1, force_sync)
